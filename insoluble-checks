SetEchoInput (true);
AttachSpec ("spec");

import "symmetric.m": Sym_Reps;
import "alt.m": Alt_Reps;
import "sl32.m": SL32_Reps;
import "psl211.m": PSL211_Reps;
import "m11.m": M11_Reps;
import "m23.m": M23_Reps;

import "s-modules.m": SparseToStandard;
import "classes.m": AlgebrasToGroups;

// Sym (p) 

Verify := true;

BOUND := 20;
for p in PrimesInInterval (5, BOUND) do 
m := Factorial (p); 
S:=Sym_Reps (p, Factorial (p));
p, m, #S;
if Verify then 
T := [SparseToStandard (s): s in S];
U := [I where _, I := IsomorphicCopy (t): t in T];
[LMGChiefFactors (u): u in U];
end if;
end for;

for p in PrimesInInterval (5, BOUND) do 
for k in [1..BOUND] do 
m := 2^(p - 1) * #Sym (p) * k;
S := Sym_Reps (p, m);
p, m, #S;
if Verify then 
T := [SparseToStandard (s): s in S];
U := [I where _, I := IsomorphicCopy (t): t in T];
[LMGChiefFactors (u): u in U];
end if;
end for;
end for;

// Alt (p) 
BOUND := 20;

for p in PrimesInInterval (5, BOUND) do 
m := Factorial (p) div 2;
S := Alt_Reps (p, Factorial (p) div 2);
p, m, #S;
if Verify then 
T := [SparseToStandard (s): s in S];
U := [I where _, I := IsomorphicCopy (t): t in T];
[LMGChiefFactors (u): u in U];
end if;
end for;

for p in PrimesInInterval (5, BOUND) do 
for k in [1..BOUND] do 
m := 2^(p - 1) * #Alt (p) * k;
S := Alt_Reps (p, m);
p, m, #S;
if Verify then 
T := [SparseToStandard (s): s in S];
U := [I where _, I := IsomorphicCopy (t): t in T];
[LMGChiefFactors (u): u in U];
end if;
end for;
end for;

// SL(3, 2) 
BOUND := 100;
p := 7; 
for k in [1..BOUND] do 
m := 168 * k;
S := SL32_Reps (p, m);
p, m, #S;
if Verify then 
T := [SparseToStandard (s): s in S];
U := [I where _, I := IsomorphicCopy (t): t in T];
[LMGChiefFactors (u): u in U];
end if;
end for;

// PSL(2, 11) 
p := 11;
BOUND := 10^2;
m := 660;
S := PSL211_Reps (p, m);
p, m, #S;
for k in [1..BOUND] do 
m := 660 * 3^5 * k;
S := PSL211_Reps (p, m);
p, m, #S;
if Verify then 
T := [SparseToStandard (s): s in S];
U := [I where _, I := IsomorphicCopy (t): t in T];
[LMGChiefFactors (u): u in U];
end if;
end for;

Verify := true;

// M11 
p := 11;
m := 7920;
S := M11_Reps (p, m);
p, m, #S;
BOUND := 20;
for k in [1..BOUND] do 
m := k * 11^2 * 7920;
S := M11_Reps (p, 7920 * m);
p, m, #S;
if Verify then 
T := [SparseToStandard (s): s in S];
U := [I where _, I := IsomorphicCopy (t): t in T];
[LMGChiefFactors (u): u in U];
end if;
end for;

// M23 
p := 23;
m := 10200960; 
S := M23_Reps (p, m);
p, m, #S;
BOUND := 10;
for k in [1..BOUND] do 
m := 10200960 * 2^11 * k;
S := M23_Reps (p, m);
p, m, #S;
end for;

