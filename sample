SetEchoInput (true);
AttachSpec ("spec");

import "symmetric.m": Sym_Reps;
import "alt.m": Alt_Reps;
import "sl32.m": SL32_Reps;
import "psl211.m": PSL211_Reps;
import "m11.m": M11_Reps;
import "m23.m": M23_Reps;

import "s-modules.m": SparseToStandard;
import "classes.m": AlgebrasToGroups;

// Sym (p) 
BOUND := 10^4;
for m in [2..BOUND] do 
for p in PrimesInInterval (5, 100) do 
if  m mod Factorial (p) eq 0 then 
S := Sym_Reps (p, m);
if #S gt 0 then 
p, m, #S;
end if;
end if;
end for;
end for;


// Alt (p) 
// BOUND := 10^6;
for m in [2..BOUND] do 
for p in PrimesInInterval (5, 100) do 
if  2*m mod Factorial (p) eq 0 then 
S := Alt_Reps (p, m);
if #S gt 0 then 
p, m, #S;
end if;
end if;
end for;
end for;

// SL(3, 2) 
// BOUND := 10^6;
p := 7; 
for m in [2..BOUND] do 
if m mod 168 eq 0 then 
S := SL32_Reps (p, m);
if #S gt 0 then 
m, #S;
end if;
end if;
end for;

p := 11;
BOUND := 10^3;
// PSL(2, 11) 
for m in [2..BOUND] do 
S := PSL211_Reps (p, 660 * m);
if #S gt 0 then 
m, #S;
//CheckGroups (S, m);
end if;
end for;

// M11 
p := 11;
// BOUND := 10^6;
for m in [2..BOUND] do 
S := M11_Reps (p, 7920 * m);
if #S gt 0 then 
m, #S;
// CheckGroups (S, m);
end if;
end for;

// M23 
p := 23;
// BOUND := 10^6;
for m in [2^11] do 
S := M23_Reps (p, 10200960 * m);
if #S gt 0 then 
m, #S;
// CheckGroups (S, m);
end if;
end for;

